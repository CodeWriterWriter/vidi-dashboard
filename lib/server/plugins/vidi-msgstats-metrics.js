'use strict'

var Influx = require('influx')
var _ = require('lodash')
var Async = require('async')

// Our defaults.
var defaults = {
  host: 'localhost',
  port: 8086,
  username: 'msgstats',
  password: 'msgstats',
  database: 'seneca_msgstats'
}

// This plugin provides handlers to query data generated by
// seneca-msgstats. Data is queried and presented in such
// a way as to make it easy for charting apps to consume.
module.exports = function (options) {
  var seneca = this
  var extend = seneca.util.deepextend

  // merge user options, create db instance
  options = extend(defaults, options)
  var db = Influx(options)

  // Generates our rolling flow rate query
  function makeQuery (name) {
    return 'SELECT SUM(c) FROM "' + name + '" WHERE time > now() - 120s  GROUP BY time(1s);'
  }

  // This is naive, it assumes all the values in a given series are
  // related to the name column. Something more robust is needed here.
  function parseMeasurementNames (measurements) {
    var names = []

    measurements.forEach(function (measurement) {
      measurement.series.forEach(function (series) {
        series.values.forEach(function (name) {
          names.push(name)
        })
      })
    })

    return names
  }

  // Since this is reporting plugin, any errors will just be noted. Pulling down
  // the whole system because of one metric failing to read isn't a great idea.
  function noteFailure (err, done) {
    console.log(err)
    done(null, null)
  }

  // We need to do some cleanup and sorting of the data. This is mostly to make
  // the server handle tasks normally done on the client. The client should be
  // able to take the data and stick it right on a chart with little fettling.
  function sanitizeData (data) {
    var points = data[0] || []

    points.forEach(function (point) {
      if (point.sum === null) {
        point.sum = 0
      }

      point.x = new Date(point.time).getTime()
      point.y = point.sum

      delete point.time
      delete point.sum
    })

    console.log(points)
    
    return _.sortBy(points, 'x')
  }

  // Returns a dataset containing a rolling flow rate for every msg captured
  // by seneca-msgstats.
  seneca.add({role: 'metrics', source: 'msgstats', metric: 'rolling_flow_rate'},
    function (msg, done) {

      // This may fail, the user needs admin privilages
      db.getMeasurements(function (err, measurements) {
        if (err) {
          return noteFailure(err, done)
        }

        var data = []
        function queryMeasurment (name, done) {
          db.query(makeQuery(name), function (err, data) {
            if (err || !data) {
              return noteFailure(err, done)
            }

            data.push({label: name, values: sanitizeData(data)})
            return done()
          })
        }

        var names = parseMeasurementNames(measurements)
        Async.eachSeries(names, queryMeasurment, function (err) {
          return done(null, data)
        })
      })
    })

  // This needs to be updated once decoration plugins are supported in seneca. We are alerting
  // anyone who cares, what source / metric(s) we can handle. This is used to autowire subscriptions
  seneca.act({role: 'metrics', cmd: 'emit', source: 'msgstats', metric: 'rolling_flow_rate'})

  // At minimum seneca needs the name of our
  // plugin so it can correctly manage it.
  return {
    name: 'vidi-msgstats-metrics'
  }
}
