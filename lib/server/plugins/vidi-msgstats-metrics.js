'use strict'

var Influx = require('influx')
var _ = require('lodash')

// Our defaults.
var defaults = {
  host: 'localhost',
  port: 8086,
  username: 'msgstats',
  password: 'msgstats',
  database: 'seneca_msgstats'
}

// This plugin provides handlers to query data generated by
// seneca-msgstats. Data is queried and presented in such
// a way as to make it easy for charting apps to consume.
module.exports = function (options) {
  var seneca = this
  var extend = seneca.util.deepextend

  // merge user options, create db instance
  options = extend(defaults, options)
  var db = Influx(options)

  // Generates our rolling flow rate query
  // based on the provided measurement names.
  function makeQuery (series_list) {
    var left = 'SELECT SUM(c) FROM "'
    var right = '"  WHERE time > now() - 120s  GROUP BY time(1s);'
    var query = ''

    series_list.forEach(function (series) {
      query = query + left + series + right
    })

    return query
  }

  // Since this is reporting plugin, any errors will just be noted. Pulling down
  // the whole system because of one metric failing to read isn't a great idea.
  function noteFailure (err, done) {
    console.log(err)
    done(null, null)
  }

  // We need to do some cleanup and sorting of the data. This is mostly to make
  // the server handle tasks normally done on the client. The client should be
  // able to take the data and stick it right on a chart with little fettling.
  function sanitizeData (data) {
    return console.log(data)

    data[0].forEach(function (point) {
      if (point.sum === null) {
        point.sum = 0
      }

      point.x = new Date(point.time).getTime()
      point.y = point.sum

      delete point.time
      delete point.sum
    })

    var sorted = _.sortBy(data[0], 'x')
  }

  // Returns a dataset containing a rolling flow rate for every msg captured
  // by seneca-msgstats.
  seneca.add({role: 'metrics', source: 'msgstats', metric: 'rolling_flow_rate'},
    function (msg, done) {

      // This may fail, the user needs admin privilages
      db.getMeasurements(function (err, measurements) {
        if (err) {
          return noteFailure(err, done)
        }

        // Hit the db once with a composite query,
        // we can sort and clean the data ourselves.
        db.query(makeQuery(measurements), function (err, data) {
          if (err || !data) {
            return noteFailure(err, done)
          }

          return done(null, {data: sanitizeData(data)})
        })
      })
    })

  // Requires seneca-pubsub-decorator, allows the server
  // to wire up auto subscriptions if and however it wants.
  if (seneca.publish) {
    seneca.publish({
      role: 'metrics',
      cmd: 'sub',
      source: 'msgstats',
      metric: 'rolling_flow_rate'
    })
  }

  return {
    name: 'vidi-msgstats-metrics'
  }
}
